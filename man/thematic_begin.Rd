% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/thematic.R
\name{thematic_begin}
\alias{thematic_begin}
\alias{thematic_end}
\alias{theme_current}
\title{Theme static plots based on a few colors}
\usage{
thematic_begin(
  bg = NULL,
  fg = NULL,
  accent = NA,
  qualitative = okabe_ito(),
  sequential = sequential_gradient(fg, accent, bg)
)

thematic_end()

theme_current(which = "all")
}
\arguments{
\item{bg}{a background color.}

\item{fg}{a foreground color.}

\item{accent}{a color for making certain graphical markers 'stand out'
(e.g., the fitted line color for \code{\link[ggplot2:geom_smooth]{ggplot2::geom_smooth()}}).
Can be 2 colors for lattice (stroke vs fill accent).}

\item{qualitative}{color palette for discrete variables.
Defaults to the Okabe-Ito colorscale (won't be used in ggplot2 when
the number of data levels exceeds the max allowed colors).}

\item{sequential}{color palette for numeric variables.
Defaults to a gradient based on \code{accent} color.}

\item{which}{which theme element (i.e., which argument of \code{\link[=thematic_begin]{thematic_begin()}}?).
Defaults to all theme elements.}
}
\description{
Theme ggplot2, lattice, and base graphics based on just a few colors
supplied to \code{\link[=thematic_begin]{thematic_begin()}}. \code{\link[=thematic_begin]{thematic_begin()}} works by modifying global
state (e.g., sets relevant options in \code{\link[graphics:par]{graphics::par()}}, \code{\link[grid:gpar]{grid::gpar()}},
\code{\link[lattice:trellis.par.set]{lattice::trellis.par.set()}}, \code{\link[ggplot2:theme_set]{ggplot2::theme_set()}}, etc). To restore
global state to the state before \code{\link[=thematic_begin]{thematic_begin()}} was called,
use \code{\link[=thematic_end]{thematic_end()}}. To inspect the current thematic state, use
\code{\link[=theme_current]{theme_current()}} (this can be particularly useful for routing the
sequential color palette to base/lattice graphics).
}
\examples{
# simple dark mode
thematic_begin("black", "white")
plot(1:10)
plot(1:10, col = 1:10)
lattice::show.settings()

# use any color code
thematic_begin("#444444", "#e4e4e4")
plot(1:10)
plot(1:10, col = 1:10)
lattice::show.settings()

# restores _original_ state
thematic_end()
plot(1:10)
lattice::show.settings()

thematic_begin("darkblue", "skyblue", "orange")
image(volcano)
image(volcano, col = theme_current("sequential"))
lattice::show.settings()
thematic_end()

}
