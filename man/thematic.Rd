% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/thematic.R
\name{thematic_on}
\alias{thematic_on}
\alias{thematic_off}
\title{Enable (or disable) simplified theming of R graphics.}
\usage{
thematic_on(
  bg = "auto",
  fg = "auto",
  accent = "auto",
  font = NA,
  sequential = sequential_gradient(),
  qualitative = okabe_ito()
)

thematic_off()
}
\arguments{
\item{bg}{a background color.}

\item{fg}{a foreground color.}

\item{accent}{a color for making certain graphical markers 'stand out'
(e.g., the fitted line color for \code{\link[ggplot2:geom_smooth]{ggplot2::geom_smooth()}}).
Can be 2 colors for lattice (stroke vs fill accent).}

\item{font}{a \code{\link[=font_spec]{font_spec()}} object. If missing, font defaults are not altered.}

\item{sequential}{a color palette for graphical markers that encode
numeric values. Can be a vector of color codes or a
\code{\link[=sequential_gradient]{sequential_gradient()}} object.}

\item{qualitative}{a color palette for graphical markers that encode
qualitative values (won't be used in ggplot2 when the number of data
levels exceeds the max allowed colors). Defaults to the Okabe-Ito colorscale.}
}
\value{
Returns any information about the previously set theme (if any), invisibly.
This value may be provided to \code{\link[=thematic_set_theme]{thematic_set_theme()}} to return to the previous
global state.
}
\description{
A unified interface for styling \strong{ggplot2}, \strong{base}, and \strong{lattice} graphics
from a handful of options. In some cases, most notably in a \strong{shiny} runtime,
those options can derive automatically from the relevant CSS styles.
}
\details{
Colors (e.g., \code{bg}, \code{fg}, \code{accent}) may be any value understood by \code{\link[=col2rgb]{col2rgb()}}
or \code{htmltools::parseCssColors()} (i.e., may be any valid R or CSS color string).
}
\section{Automatic values}{


The \code{bg}, \code{fg}, \code{accent}, and \code{font} arguments all support a value of \code{'auto'},
which are all resolved, at plot time, based on the execution environment. In particular,
it use the following information, in order:
\enumerate{
\item The CSS styles of the currently executing \strong{shiny} output container (via \code{shiny::getCurrentOutputInfo()}).
\item \code{\link[=auto_defaults]{auto_defaults()}}.
\item \code{bootstraplib::bs_theme_get_variables()} (if running inside \code{rmarkdown::html_document()}).
\item \code{rstudioapi::getThemeInfo()} (if the relevant graphics device is RStudioGD).
}

If, for whatever reason, \code{'auto'} doesn't resolve to the right value,
provide the desired values to \code{thematic_on()} or \code{auto_defaults()}.
}

\examples{
# simple dark mode
thematic_on("black", "white")
plot(1:10)
plot(1:10, col = 1:10)
lattice::show.settings()

# use any hex color string
thematic_on("#444444", "#e4e4e4")
plot(1:10)
plot(1:10, col = 1:10)
lattice::show.settings()

# disables thematic (also restores global state)
thematic_off()
plot(1:10)
lattice::show.settings()

thematic_on("darkblue", "skyblue", "orange")
image(volcano)
image(volcano, col = thematic_get_option("sequential"))
lattice::show.settings()
thematic_off()

}
\seealso{
\code{\link[=thematic_with_device]{thematic_with_device()}}, \code{\link[=thematic_with_theme]{thematic_with_theme()}}
}
