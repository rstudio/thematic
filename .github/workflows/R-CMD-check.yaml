on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release', vdiffr: true}
          - {os: macOS-latest, r: 'release', vdiffr: true}
          - {os: ubuntu-18.04, r: 'release', vdiffr: true, rspm: "https://packagemanager.rstudio.com/all/__linux__/bionic/latest"}
          - {os: ubuntu-20.04, r: 'devel', vdiffr: false, rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-16.04, r: 'oldrel', vdiffr: false, rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          - {os: ubuntu-16.04, r: '3.5', vdiffr: false, rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          - {os: ubuntu-16.04, r: '3.4', vdiffr: false, rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}
          - {os: ubuntu-16.04, r: '3.3', vdiffr: false, rspm: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      _R_CHECK_FORCE_SUGGESTS_: false
      # Run vdiffr on the release version of R
      VDIFFR_RUN_TESTS: ${{ matrix.config.vdiffr }}
      # Same for shinytest
      SHINYTEST_RUN_TESTS: ${{ matrix.config.vdiffr }}
      VDIFFR_LOG_PATH: "../vdiffr.Rout.fail"

    steps:
      - name: Windows git setup
        if: runner.os == 'Windows'
        run:
          git config --global core.autocrlf false

      - uses: actions/checkout@v2
        with:
          lfs: true

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@master

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), "depends.Rds", version = 2)
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ matrix.config.r }}-1-${{ hashFiles('depends.Rds') }}
          restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-1-

      # https://github.com/r-hub/sysreqsdb/issues/77#issuecomment-620025428
      - name: Use cran:libgit2 PPA to avoid conflicts of libcurl4-gnutls-dev
        if: matrix.config.os == 'ubuntu-16.04'
        run: |
          sudo add-apt-repository ppa:cran/libgit2
          sudo apt-get update

      # https://github.com/r-lib/devtools/issues/653
      - name: Reinstall curl
        if: matrix.config.os == 'ubuntu-18.04'
        run: |
          install.packages("curl")
        shell: Rscript {0}

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'cat(do.call(remotes::system_requirements, strsplit(${{ matrix.config.os }}, "-")[[1]]), sep = "\n")')

      - name: Install any dev or missing sysdeps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y libfontconfig1-dev libcairo2-dev
          sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable
          sudo apt-get update
          sudo apt-get install -y libudunits2-dev libgdal-dev libgeos-dev libproj-dev

      - name: Mac systemdeps
        if: runner.os == 'macOS'
        run: |
          brew install --cask xquartz phantomjs
          brew install pkg-config cairo

      # ------------------------------------------------------------

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      # Packages that aren't really worth putting in suggests but are
      # worth testing
      - name: Install testing dependencies
        run: |
          # TODO: remove me after next release cycle
          remotes::install_github('rstudio/rmarkdown')
          install.packages(c('shinytest', 'callr', 'sf', 'ggthemes', 'patchwork', 'gridExtra', 'tinytex'))
          tinytex::install_tinytex()
        shell: Rscript {0}

      - name: Install phantomjs on windows
        if: runner.os == 'Windows'
        run: |
          shinytest::installDependencies()
        shell: Rscript {0}

      # Mimic shinycoreci's approach to auto-generating GH branches
      # for easy checkout and shinytest::view_test_diff()
      - name: Create short sha
        id: short_sha
        run: >
          Rscript
          -e "cat('::set-output name=sha::', substr(paste0('${{ github.event.pull_request.head.sha }}', '${{ github.sha }}'), 1, 7), sep = '')"
      - name: Create failure branch name
        id: failed_branch
        run: >
          Rscript
          -e "cat('::set-output name=name::', format(Sys.time(), '%Y_%m_%d_%H_%M'), '-', '${{ steps.short_sha.outputs.sha }}', sep = '')"
      - name: Create GHA branch name (i.e., test run identifier)
        id: gha_branch
        run: >
          Rscript
          -e "cat('::set-output name=name::gha-', '${{ steps.failed_branch.outputs.name }}', '-', '${{ matrix.config.r }}', '-', '${{ runner.os }}', sep = '')"


      # Run test() before R CMD check since, for some reason, rcmdcheck::rcmdcheck() skips vdiffr tests
      - name: Install devtools
        run: if (!require(devtools)) install.packages("devtools")
        shell: Rscript {0}
      - name: Run Tests
        run: |
          devtools::install()
          res <- devtools::test()
          df <- as.data.frame(res)
          if (sum(df$failed) > 0 || any(df$error)) stop("GHA CI tests failed")
        shell: Rscript {0}

      # Run check with --no-tests since we ran them abve
      - name: Check
        run: rcmdcheck::rcmdcheck(args = c("--no-tests", "--no-manual"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      # Upload the whole pkg since tests where run with devtools::test()
      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: ./

      - name: Push test files to a GH branch
        if: failure()
        shell: bash
        # need to unset the extra header to allow for regular https push
        # git checkout -B -- Creates the branch <new_branch> and start it at <start_point>; if it already exists, then reset it to <start_point>.
        # git push --force -- JUST in case the prior branch existed
        run: |
          git config --local user.email "${GITHUB_ACTOR}@users.noreply.github.com" && \
            git config --local user.name "${GITHUB_ACTOR}" && \
            git config --local --unset http.https://github.com/.extraheader && \
            git config --local --list
            git fetch --unshallow

          git checkout -B ${{ steps.gha_branch.outputs.name }}

          git add tests/ && \
            git commit -m 'Add test files - rstudio/thematic@${{ steps.short_sha.outputs.sha }}'

          git log -n 4 --pretty=oneline --simplify-by-decoration

          git push --force https://cpsievert:${{secrets.GH_TOKEN}}@github.com/rstudio/thematic.git "HEAD:${{ steps.gha_branch.outputs.name }}"
